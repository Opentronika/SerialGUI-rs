name: macOS App Packaging

on:
  workflow_call:

jobs:
  package-macos:
    # The runner is selected from the matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Configuration for ARM architecture (Apple Silicon)
          - os: macos-latest
            TARGET: aarch64-apple-darwin
            ARCH_SUFFIX: arm64 # Suffix for file names, if needed

          # Configuration for Intel architecture
          - os: macos-13 # macos-13 is a good option for x86_64, macos-latest might be ARM
            TARGET: x86_64-apple-darwin
            ARCH_SUFFIX: x64 # Suffix for file names, if needed
    env:
      RUSTFLAGS: -D warnings
      RUSTDOCFLAGS: -D warnings

    steps:
      - uses: actions/checkout@v4

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          # Use the TARGET variable from the matrix to install the correct toolchain
          target: ${{ matrix.TARGET }}

      - name: Build release
        run: |
          # Use the TARGET variable from the matrix to build the correct binary
          cargo build --release --target=${{ matrix.TARGET }}

      - name: Package .app bundle
        run: |
          APP_NAME="SerialGUI_rs"
          # Get the TARGET from the GitHub Actions environment variable
          CURRENT_TARGET="${{ matrix.TARGET }}"
          BIN_PATH="target/$CURRENT_TARGET/release/$APP_NAME"
          APP_BUNDLE="$APP_NAME.app" # The bundle name is the same for both architectures

          echo "Creating the .app bundle for architecture: $CURRENT_TARGET"

          mkdir -p "$APP_BUNDLE/Contents/MacOS"
          mkdir -p "$APP_BUNDLE/Contents/Resources"

          # Copy the binary
          cp "$BIN_PATH" "$APP_BUNDLE/Contents/MacOS/$APP_NAME"

          # Copy the icon (ensure 'assets/SerialGUI-rs-logo.icns' exists)
          cp assets/SerialGUI-rs-logo.icns "$APP_BUNDLE/Contents/Resources/$APP_NAME.icns"

          # Copy the Info.plist from a template and replace placeholders
          # Make sure to create the file 'assets/Info.plist.template' in your repository
          cp assets/Info.plist.template "$APP_BUNDLE/Contents/Info.plist"
          # Replace __APP_NAME__ with the actual application name
          sed -i '' "s/__APP_NAME__/$APP_NAME/g" "$APP_BUNDLE/Contents/Info.plist"
          # Replace __ARCH_TARGET__ with the architecture (e.g., arm64 or x86)
          sed -i '' "s/__ARCH_TARGET__/$(echo $CURRENT_TARGET | cut -d'-' -f1)/g" "$APP_BUNDLE/Contents/Info.plist"

          # It's good practice to set executable permissions for the binary
          chmod +x "$APP_BUNDLE/Contents/MacOS/$APP_NAME"

      - name: Create DMG
        run: |
          APP_NAME="SerialGUI_rs"
          APP_BUNDLE="$APP_NAME.app"
          DMG_NAME="${APP_NAME}-${{ matrix.ARCH_SUFFIX }}.dmg" # Dynamic DMG name
          VOL_NAME="${APP_NAME} (${{ matrix.ARCH_SUFFIX }})" # Dynamic volume name

          mkdir dmg_folder
          # Move the .app bundle created in the previous step to the DMG folder
          mv "$APP_BUNDLE" dmg_folder/

          echo "Creating the DMG file: $DMG_NAME"
          hdiutil create -volname "$VOL_NAME" \
                         -srcfolder dmg_folder \
                         -ov -format UDZO "$DMG_NAME"

      - name: Upload DMG
        uses: actions/upload-artifact@v3
        with:
          # Dynamic artifact name to differentiate between architectures
          name: ${{ github.job }}-${{ matrix.ARCH_SUFFIX }}
          # Dynamic DMG file path
          path: SerialGUI_rs-${{ matrix.ARCH_SUFFIX }}.dmg
