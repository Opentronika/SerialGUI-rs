name: macOS App Packaging

on:
  workflow_call:

jobs:
  package-macos:
    # El runner se selecciona de la matriz
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Configuración para arquitectura ARM (Apple Silicon)
          - os: macos-latest
            TARGET: aarch64-apple-darwin
            ARCH_SUFFIX: arm64 # Sufijo para nombres de archivos, si es necesario

          # Configuración para arquitectura Intel
          - os: macos-13 # macos-13 es una buena opción para x86_64, macos-latest puede ser ARM
            TARGET: x86_64-apple-darwin
            ARCH_SUFFIX: x64 # Sufijo para nombres de archivos, si es necesario
    env:
      RUSTFLAGS: -D warnings
      RUSTDOCFLAGS: -D warnings

    steps:
      - uses: actions/checkout@v4

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          # Usar la variable TARGET de la matriz para instalar el toolchain correcto
          target: ${{ matrix.TARGET }}

      - name: Build release
        run: |
          # Usar la variable TARGET de la matriz para construir el binario correcto
          cargo build --release --target=${{ matrix.TARGET }}

      - name: Package .app bundle
        run: |
          APP_NAME="SerialGUI_rs"
          # Obtener el TARGET de la variable de entorno de GitHub Actions
          CURRENT_TARGET="${{ matrix.TARGET }}"
          BIN_PATH="target/$CURRENT_TARGET/release/$APP_NAME"
          APP_BUNDLE="$APP_NAME.app" # El nombre del bundle es el mismo para ambas arquitecturas

          echo "Creando el bundle .app para la arquitectura: $CURRENT_TARGET"

          mkdir -p "$APP_BUNDLE/Contents/MacOS"
          mkdir -p "$APP_BUNDLE/Contents/Resources"

          # Copiar el binario
          cp "$BIN_PATH" "$APP_BUNDLE/Contents/MacOS/$APP_NAME"

          # Copiar el icono (asegúrate de que 'assets/SerialGUI-rs-logo.icns' exista)
          cp assets/SerialGUI-rs-logo.icns "$APP_BUNDLE/Contents/Resources/$APP_NAME.icns"

          # Crear Info.plist
          # Puedes añadir CFBundleDisplayName si quieres un nombre más amigable en el Finder
          cat > "$APP_BUNDLE/Contents/Info.plist" <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>CFBundleExecutable</key>
  <string>$APP_NAME</string>
  <key>CFBundleIdentifier</key>
  <string>com.example.$APP_NAME</string>
  <key>CFBundleName</key>
  <string>$APP_NAME</string>
  <key>CFBundleVersion</key>
  <string>1.0</string>
  <key>CFBundlePackageType</key>
  <string>APPL</string>
  <key>CFBundleIconFile</key>
  <string>$APP_NAME.icns</string>
  <key>LSArchitectureForRequiredSystem</key>
  <string>$(echo $CURRENT_TARGET | cut -d'-' -f1)</string>
</dict>
</plist>
EOF
          # Es buena práctica establecer permisos ejecutables para el binario
          chmod +x "$APP_BUNDLE/Contents/MacOS/$APP_NAME"

      - name: Create DMG
        run: |
          APP_NAME="SerialGUI_rs"
          APP_BUNDLE="$APP_NAME.app"
          DMG_NAME="${APP_NAME}-${{ matrix.ARCH_SUFFIX }}.dmg" # Nombre de DMG dinámico
          VOL_NAME="${APP_NAME} (${{ matrix.ARCH_SUFFIX }})" # Nombre de volumen dinámico

          mkdir dmg_folder
          # Mover el bundle .app creado en el paso anterior a la carpeta del DMG
          mv "$APP_BUNDLE" dmg_folder/

          echo "Creando el archivo DMG: $DMG_NAME"
          hdiutil create -volname "$VOL_NAME" \
                         -srcfolder dmg_folder \
                         -ov -format UDZO "$DMG_NAME"

      - name: Upload DMG
        uses: actions/upload-artifact@v3
        with:
          # Nombre del artefacto dinámico para diferenciar entre arquitecturas
          name: ${{ github.job }}-${{ matrix.ARCH_SUFFIX }}
          # Ruta del archivo DMG dinámico
          path: SerialGUI_rs-${{ matrix.ARCH_SUFFIX }}.dmg
